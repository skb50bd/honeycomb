version: "3.8"

name: honeycomb
services:
  nginx-proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8080:81
    environment:
      DB_MYSQL_HOST: "nginx-proxy-db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD}
      DB_MYSQL_NAME: "npm"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:81/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ${NGINX_PROXY_MANAGER_DATA_DIR}:/data
      - ${CERTS_DIR}:/etc/letsencrypt
    networks:
      - edge
    depends_on:
      - nginx-proxy-db

  nginx-proxy-db:
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_MYSQL_PASSWORD}
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD}
    volumes:
      - ./mysql:/var/lib/mysql
    networks:
      - edge

  # traefik:
  #   image: traefik:3.0
  #   container_name: traefik
  #   command:
  #     - "--providers.file.filename=/etc/traefik/traefik-dynamic.yaml"
  #   ports:
  #     - 80:80
  #     - 443:443
  #     - 8080:8080
  #   networks:
  #     - edge
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${CERTS_DIR}/${BASE_DOMAIN}/:/certificates/:ro
  #     - ${HTPASSWD_PATH}:/auth/.htpasswd:ro
  #     - ./traefik/:/etc/traefik/:ro
  #   healthcheck:
  #     test: ["CMD", "traefik", "healthcheck", "--ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: always

  minio:
    image: minio/minio
    container_name: minio
    networks:
      - edge
    volumes:
      - ${MINIO_DATA_DIR}:/data/
    environment:
      - MINIO_ACCESS_KEY
      - MINIO_SECRET_KEY
    command: server /data
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  docker_registry:
    image: registry:2
    container_name: docker_registry
    networks:
      - edge
    environment:
      - REGISTRY_AUTH_HTPASSWD_PATH
      - REGISTRY_AUTH_HTPASSWD_REALM
      - REGISTRY_HTTP_ADDR=0.0.0.0:443
      - REGISTRY_HTTP_TLS_CERTIFICATE
      - REGISTRY_HTTP_TLS_KEY
      - REGISTRY_STORAGE
      - REGISTRY_STORAGE_S3_ACCESSKEY
      - REGISTRY_STORAGE_S3_SECRETKEY
      - REGISTRY_STORAGE_S3_BUCKET
      - REGISTRY_STORAGE_S3_REGION
      - REGISTRY_STORAGE_S3_REGIONENDPOINT=http://minio:9000
    volumes:
      - ${HTPASSWD_PATH}:/auth/htpasswd
      - ${CERTS_DIR}/${BASE_DOMAIN}/:/certificates/
    depends_on:
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/v2/_catalog"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks:
      - edge
    ports:
      - 9000:9000
      - 9443:9443
    volumes:
        - ${PORTAINER_DATA_DIR}:/data
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  portainer_agent:
    image: portainer/agent
    container_name: portainer_agent
    ports:
      - 9001:9001
    networks:
      - edge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
    depends_on:
      - portainer
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9001"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  speedtest:
    image: openspeedtest/latest
    container_name: speedtest
    networks:
      - edge
    ports:
      - 3000:3000
      - 3001:3001
    # depends_on:
    #   - traefik
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    networks:
      - edge
    ports:
      - 8766:8766
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - WEBUI_PORT=8766
    volumes:
      - ${QBITTORRENT_CONFIG_DIR}:/config
      - ${STORAGE_DIR}:/media
    # depends_on:
    #   - traefik
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8766"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  flood:
    image: jesec/flood:master
    container_name: flood
    command: --port 8688
    networks:
      - edge
    ports:
      - 8688:8688
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - ${FLOOD_CONFIG_DIR}:/config
      - ${STORAGE_DIR}:/media
    # depends_on:
    #   - traefik
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    networks:
      - edge
    ports:
      - 32400:32400
    environment:
      - PLEX_CLAIM
      - TZ
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ${PLEX_CONFIG_DIR}:/config
      - ${PLEX_TRANSCODE_DIR}:/transcode
      - ${STORAGE_DIR}:/media
    # depends_on:
    #   - traefik
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:32400"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - edge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 3600
    healthcheck:
      test: ["CMD-SHELL", "pgrep watchtower"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

networks:
  edge:
    external: true

