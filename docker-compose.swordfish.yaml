version: "3.8"

name: honeycomb
services:
  nginx-proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8080:81
    environment:
      DB_MYSQL_HOST: "nginx-proxy-db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD}
      DB_MYSQL_NAME: "npm"
    volumes:
      - ${NGINX_PROXY_MANAGER_DATA_DIR}:/data
      - ${CERTS_DIR}:/etc/letsencrypt
    networks:
      - edge
    depends_on:
      - nginx-proxy-db

  nginx-proxy-db:
    image: 'jc21/mariadb-aria:latest'
    container_name: nginx-proxy-db
    restart: always
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_MYSQL_PASSWORD}
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD}
    volumes:
      - ${NGINX_DB_DATA_DIR}:/var/lib/mysql
    networks:
      - edge

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel run --token ${CF_TUNNEL_TOKEN}
    restart: always
    networks:
      - edge

  mon:
    image: louislam/uptime-kuma:latest
    container_name: mon
    restart: always
    expose:
      - 3001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${MON_DATA_DIR}:/app/data
    networks:
      - edge

  dockge:
    image: louislam/dockge:1
    container_name: dockge
    restart: always
    ports:
      - 5001:5001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKGE_STACKS_DIR}:/app/data
      - ${DOCKGE_STACKS_DIR}:/opt/stacks
    environment:
      - DOCKGE_STACKS_DIR=/opt/stacks
    networks:
      - edge

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks:
      - edge
    ports:
      - 9000:9000
      - 9443:9443
    volumes:
        - ${PORTAINER_DATA_DIR}:/data
    restart: always

  portainer_agent:
    image: portainer/agent
    container_name: portainer_agent
    ports:
      - 9001:9001
    networks:
      - edge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
    depends_on:
      - portainer
    restart: always

  speedtest:
    image: openspeedtest/latest
    container_name: speedtest
    networks:
      - edge
    ports:
      - 3000:3000
      - 3001:3001
    restart: always

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    networks:
      - edge
    ports:
      - 8766:8766
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - WEBUI_PORT=8766
    volumes:
      - ${QBITTORRENT_CONFIG_DIR}:/config
      - ${STORAGE_DIR}:/media
    restart: always

  flood:
    image: jesec/flood:master
    container_name: flood
    command: --port 8688
    networks:
      - edge
    ports:
      - 8688:8688
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
    volumes:
      - ${FLOOD_CONFIG_DIR}:/config
      - ${STORAGE_DIR}:/media
    restart: always

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    networks:
      - edge
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    environment:
      - PLEX_CLAIM
      - TZ
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ${PLEX_CONFIG_DIR}:/config
      - ${PLEX_TRANSCODE_DIR}:/transcode
      - ${STORAGE_DIR}:/media
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:32400"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - edge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 3600
    healthcheck:
      test: ["CMD-SHELL", "pgrep watchtower"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

networks:
  edge:
    external: true
